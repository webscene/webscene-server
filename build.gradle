group 'org.webscene'
version '0.1-SNAPSHOT'

boolean deleteDirectory(File directory) {
    //noinspection GroovyUnusedAssignment
    File[] files = null

    if (directory.exists()) {
        files = directory.listFiles()
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i])
                } else {
                    files[i].delete()
                }
            }
        }
    }
    return directory.delete()
}

buildscript {
    ext {
        KOTLIN_VER = '1.1.1'
        DOKKA_VER = '0.9.13'
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VER"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${DOKKA_VER}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.jetbrains.dokka'

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$KOTLIN_VER"
}

jar {
    from configurations.compile.collect { zipTree it }
}

dokka {
    moduleName = 'webscene-server'
    outputDirectory = "$buildDir/javadoc"
    sourceDirs = files('src/main/kotlin')
}

dokka.doFirst {
    def oldDir = new File("${projectDir.absolutePath}/build/javadoc")

    deleteDirectory(oldDir)
}

task createDokkaJar(type: Jar, dependsOn: dokka) {
    classifier 'javadoc'
    from dokka.outputDirectory
}

task createSourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task createAllJarFiles(dependsOn: [jar, createSourceJar, createDokkaJar]) {
    println("Creating JAR files (library, sources and documentation)...")
}

createAllJarFiles.doLast {
    println("Finished creating JAR files.")
}
